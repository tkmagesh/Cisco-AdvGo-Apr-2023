Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:30 AM (20 mins)
    Lunch Break : 12:30 PM (1 hour)
    Tea Break   : 3:00 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    - No powerpoints
    - 100% code driven class
    - No specific time for Q&A

Software Requirements:
    - Go Tools (https://go.dev/dl)
    - Visual Studio Code (Or any other editor)
    - "Go" extension for Visual Studio Code

Repo:
    https://github.com/tkmagesh/cisco-advgo-apr-2023

Agenda:
    Day - 1
        Concurrency
            Context
            Patterns
    Day - 2
        Http Services
            Go Swagger
        GRPC Services
        Testing & Benchmarking
    Day - 3
        Database programming
        Profiling Go Applications
        Containerization of Go Applications
            Docker 
            Kubernetes

Expectations
    - Errors
    - Panic & Recovery
    - Interfaces
    - Pointers
    - Structs & Structs Composition
    - Methods
    - Modules & Packages
    - Higher Order Functions

About You:
    Name
    Primary Skillset
    Experience in Go
    Have you attended MY Go foundation class? (7 + 6)
    Any foundation topics you would like to revisit?
        - Concurrency
        - Context
        - Interfaces

    - GRPC
    - Clean Code (Refactoring)
    - Debugging
    - Logging


Concurrency Programming
    Parallel Processing
    Effective utilization of resources
    Separating parts of workload

    Writing an application with more than one execution path

    Channel
        Declaration
            var ch chan int
        Instantiation
            ch = make(chan int)
        Operations (<- operator)
            Send
                ch <- 100
            Receive
                data := <- ch

        Behavior
            A channel RECEIVE operation is ALWAYS a blocking operation
            A SEND operation can succeed (UNBLOCKED) ONLY if a RECEIVE operation is already initiated, otherwise it will be BLOCKED until a receive operation is initiated (conditions apply)
                
Worker


Pool
    Minimize the number of resources being created (NOT restricting)

Runner

GRPC
    TCP
    HTTP2
        binary
    protocol buffers
        Share the schema between the client and server
        Send & Receive ONLY data
    Communication Patterns
        Request & Response
        Server Streaming (one request + stream of responses)
        Client Streaming (stream of requests + one response)
        Bidirectional Streaming (Stream of requests + Stream of responses)

    Interop (restricted to a few languages / tech stack)

Step:
    1. Install the tools for generating proxy & stub
    2. Create the Contract (protocol buffers)
        Service Contract
        Operation Contracts
        Data / Message Contracts
    3. Generate the proxy and the stub
    4. Implement the service (in the server)
    5. Host the service
    6. Communicate from the client using the proxy

Tools Installation
    1. Protocol Buffers Compiler (protoc tool)
        Windows:
            Download the file, extract and keep in a folder (PATH) accessble through the command line
            https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-win64.zip
        Mac:
            brew install protobuf

        Verification:
            protoc --version

    2. Go plugins (installed in the GOPATH/bin folder)
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2



Generating Proxy & Stub
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto

Versioning GRPC services
    https://medium.com/swlh/building-apis-with-grpc-and-go-9a6d369d7ce


HTTP Services
    1. Using the native standard library packages
        Pros:
            We have absolute control on the application flow
            We have absolute control on the implementation

    2. Use some libraries
        - routing
        - logging
        - db communication
        Pros:
            We have absolute control on the application flow

    3. Using a web framework
        Framework decides the application flow
        Framework would offer all the infrastructure capabilities